#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 OLED(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
#define BUZZER_PIN 2
#define TEXT_SIZE 2

int button_increase_hour = 7;
int button_increase_min = 6;
int button_alarm = 5;
int button_exit = 4;
long bounce_time_delay = 150;
int timer_start_hour = 0;
int timer_start_minute = 0;
int timer_start_second = 0;
int timer_alarm_hour = 12;
int timer_alarm_minute = 12;
int activate = 0;

void setup() {
  Serial.begin(9600);
  OLED.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  pinMode(button_increase_hour, INPUT);
  pinMode(button_increase_min, INPUT);
  pinMode(button_alarm, INPUT);
  pinMode(button_exit, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  delay(1000);
}

void loop() {
  OLED.clearDisplay();
  
  write_time();
  check_time();
  write_alarm();
  clock_alert();
  button_increase_number();
  button_increase_number_min();
  button_go_to_set_alarm();
  button_exit_set_alarm();
  
  delay(1000);
}

void button_increase_number() {
  int state = digitalRead(button_increase_hour);
  
  if (state == 1 && activate == 0) {
    if(millis() > bounce_time_delay){
       timer_start_hour++;
    }
  }
  if (state == 1 && activate == 1) {
    if(millis() > bounce_time_delay){
       timer_alarm_hour++;
    }
  }
}

void button_increase_number_min() {
  int state = digitalRead(button_increase_min);
  
  if (state == 1 && activate == 0) {
    if(millis() > bounce_time_delay){
       timer_start_minute++;
    }
  }

  if (state == 1 && activate == 1) {
    if(millis() > bounce_time_delay){
       timer_alarm_minute++;
    }
  }
}

void button_go_to_set_alarm() {
  int state = digitalRead(button_alarm);

  if (state == 1 && activate == 0) {
    if(millis() > bounce_time_delay){
       activate = 1;
    }
  }
}

void button_exit_set_alarm() {
  int state = digitalRead(button_exit);
  
  if (state == 1 && activate == 1) {
    if(millis() > bounce_time_delay){
       activate = 0;
    }
  }
}
  
void write_time() {
  if(activate == 0){
  Serial.println(timer_start_second);
  OLED.setTextColor(WHITE);
  OLED.setCursor(30, 6);
  OLED.setTextSize(3);
  OLED.println(":");
  OLED.setCursor(72, 6);
  OLED.println(":");
  if(timer_start_hour < 10) {
    OLED.setTextColor(WHITE);
    OLED.setCursor(5, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println("0");
    OLED.setCursor(18, 10);
    OLED.println(timer_start_hour);
    OLED.display();
  }
  if(timer_start_hour >= 10 && timer_start_hour < 24){
    OLED.setTextColor(WHITE);
    OLED.setCursor(5, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println(timer_start_hour);
    OLED.display(); 
  }
  if(timer_start_minute < 10) {
    OLED.setTextColor(WHITE);
    OLED.setCursor(47, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println("0");
    OLED.setCursor(60, 10);
    OLED.println(timer_start_minute);
    OLED.display();
  }
  if(timer_start_minute >= 10 && timer_start_minute < 60){
    OLED.setTextColor(WHITE);
    OLED.setCursor(47, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println(timer_start_minute);
    OLED.display();
  }
  if(timer_start_second < 10) {
    OLED.setTextColor(WHITE);
    OLED.setCursor(90, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println("0");
    OLED.setCursor(103, 10);
    OLED.println(timer_start_second);
    OLED.display();
  }
  if(timer_start_second >= 10 && timer_start_second < 60){
    OLED.setTextColor(WHITE);
    OLED.setCursor(90, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println(timer_start_second);
    OLED.display();
    }
  if(timer_start_hour >= 10 && timer_start_hour < 24){
    OLED.setTextColor(WHITE);
    OLED.setCursor(5, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println(timer_start_hour);
    OLED.display(); 
    }
  }
}

void write_alarm() {
  if(activate == 1){
    OLED.setTextColor(WHITE);
    OLED.setCursor(0, 0);
    OLED.setTextSize(1);
    OLED.println("SET ALARM");
    OLED.display();
  if(timer_alarm_hour < 10) {
    OLED.setTextColor(WHITE);
    OLED.setCursor(0, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println("0");
    OLED.setCursor(13, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println(timer_alarm_hour);
    OLED.setCursor(30, 10);
    OLED.print("hr");
    OLED.display();
  }
  if(timer_alarm_hour >= 10 && timer_alarm_hour < 24){
    OLED.setTextColor(WHITE);
    OLED.setCursor(0, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println(timer_alarm_hour);
    OLED.setCursor(30, 10);
    OLED.print("hr");
    OLED.display(); 
    }
  if(timer_alarm_minute < 10) {
    OLED.setTextColor(WHITE);
    OLED.setCursor(60, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println("0");
    OLED.setCursor(73, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println(timer_alarm_minute);
    OLED.setCursor(90, 10);
    OLED.print("min");
    OLED.display();
    }
  if(timer_alarm_minute >= 10 && timer_alarm_minute < 60){
    OLED.setTextColor(WHITE);
    OLED.setCursor(60, 10);
    OLED.setTextSize(TEXT_SIZE);
    OLED.println(timer_alarm_minute);
    OLED.setCursor(90, 10);
    OLED.print("min");
    OLED.display(); 
    }
  }
}

void check_time() {
  timer_start_second++;
   if(timer_start_second == 60){
    timer_start_minute++;
    timer_start_second = 0;
  }
  if(timer_start_minute == 60){
    timer_start_hour++;
    timer_start_minute = 0;
  }
  if(timer_alarm_minute == 60){
    timer_alarm_hour++;
    timer_alarm_minute = 0;
  }
  if(timer_start_hour == 24) {
      timer_start_hour = 0;
} 
  if(timer_alarm_hour == 24) {
      timer_alarm_hour = 0;
  }
}

void speaker(){
  //digitalWrite(BUZZER_PIN, LOW);
  //delay(100);
  digitalWrite(BUZZER_PIN, HIGH);
  delay(100);
}

void clock_alert(){
  if((timer_alarm_hour == timer_start_hour) && (timer_alarm_minute == timer_start_minute)){
    speaker();
    }
}
